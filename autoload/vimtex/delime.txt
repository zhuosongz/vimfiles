function! vimtex#delim#change(open, close, new) " {{{1
  "
  " Set target environment
  "
  if a:new ==# ''
    let [l:beg, l:end] = ['', '']
  elseif a:new==# 'b('
    let [l:beg, l:end] = ['\bigl(', '\bigr)']
  else
    let l:side = a:new =~# g:vimtex#delim#re.delim_all.close
    let l:index = index(map(copy(g:vimtex#delim#lists.delim_all.name),
          \   'v:val[' . l:side . ']'),
          \ a:new)
    if l:index >= 0
      let [l:beg, l:end] = g:vimtex#delim#lists.delim_all.name[l:index]
    else
      let [l:beg, l:end] = [a:new, a:new]
    endif
  endif

  let l:line = getline(a:open.lnum)
  call setline(a:open.lnum,
        \   strpart(l:line, 0, a:open.cnum-1)
        \ . l:beg
        \ . strpart(l:line, a:open.cnum + len(a:open.match) - 1))

  let l:c1 = a:close.cnum
  let l:c2 = a:close.cnum + len(a:close.match) - 1
  if a:open.lnum == a:close.lnum
    let n = len(l:beg) - len(a:open.match)
    let l:c1 += n
    let l:c2 += n
    let pos = vimtex#pos#get_cursor()
    if pos[2] > a:open.cnum + len(a:open.match) - 1
      let pos[2] += n
      call vimtex#pos#set_cursor(pos)
    endif
  endif

  let l:line = getline(a:close.lnum)
  call setline(a:close.lnum,
        \ strpart(l:line, 0, l:c1-1) . l:end . strpart(l:line, l:c2))

  if a:new ==# ''
    silent! call repeat#set("\<plug>(vimtex-delim-delete)", v:count)
  else
    silent! call repeat#set(
          \ "\<plug>(vimtex-delim-change-math)" . a:new . '', v:count)
  endif
endfunction

